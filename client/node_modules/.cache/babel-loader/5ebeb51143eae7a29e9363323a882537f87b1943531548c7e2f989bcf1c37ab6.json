{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shagun Khandelwal\\\\zerodha\\\\client\\\\src\\\\components\\\\Watchlist\\\\Watchlist.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Watchlist.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Watchlist = () => {\n  _s();\n  const FINNHUB_API_KEY = 'd17tfrhr01qteuvpuh10d17tfrhr01qteuvpuh1g'; // Replace with your Finnhub API key\n  const [marketIndices, setMarketIndices] = useState([]);\n  const [stocks, setStocks] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [socket, setSocket] = useState(null);\n\n  // Initial data fetch\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        // Fetch initial indices data\n        const niftyResponse = await fetch(`https://finnhub.io/api/v1/quote?symbol=NSE:NIFTY_50&token=${FINNHUB_API_KEY}`);\n        const sensexResponse = await fetch(`https://finnhub.io/api/v1/quote?symbol=BSE:SENSEX&token=${FINNHUB_API_KEY}`);\n        const niftyData = await niftyResponse.json();\n        const sensexData = await sensexResponse.json();\n        setMarketIndices([{\n          name: 'NIFTY',\n          number: '50',\n          value: niftyData.c,\n          change: niftyData.d,\n          changePercent: niftyData.dp\n        }, {\n          name: 'SENSEX',\n          number: '',\n          value: sensexData.c,\n          change: sensexData.d,\n          changePercent: sensexData.dp\n        }]);\n\n        // Define the stocks we want to track\n        const stockSymbols = ['AMZN', 'MSFT', 'INFY', 'AAPL'];\n\n        // Fetch initial stock prices\n        const stockPromises = stockSymbols.map(symbol => fetch(`https://finnhub.io/api/v1/quote?symbol=${symbol}&token=${FINNHUB_API_KEY}`));\n        const stockResponses = await Promise.all(stockPromises);\n        const stockData = await Promise.all(stockResponses.map(res => res.json()));\n        console.log(stockData);\n        setStocks(stockSymbols.map((symbol, index) => ({\n          symbol,\n          price: stockData[index].c,\n          change: stockData[index].d,\n          changePercent: stockData[index].dp\n        })));\n        setLoading(false);\n      } catch (err) {\n        console.error('Initial fetch failed:', err);\n        setError('Failed to load initial data. Trying real-time connection...');\n        setLoading(false);\n      }\n    };\n    fetchInitialData();\n  }, []);\n\n  // Initialize WebSocket connection after initial data is loaded\n  useEffect(() => {\n    if (loading || stocks.length === 0) return;\n    const ws = new WebSocket(`wss://ws.finnhub.io?token=${FINNHUB_API_KEY}`);\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n      // Subscribe to all stocks\n      stocks.forEach(stock => {\n        ws.send(JSON.stringify({\n          type: 'subscribe',\n          symbol: `BSE:${stock.symbol}`\n        }));\n      });\n      // Subscribe to indices\n      ws.send(JSON.stringify({\n        type: 'subscribe',\n        symbol: 'NSE:NIFTY_50'\n      }));\n      ws.send(JSON.stringify({\n        type: 'subscribe',\n        symbol: 'BSE:SENSEX'\n      }));\n    };\n    ws.onmessage = e => {\n      const data = JSON.parse(e.data);\n      if (data.type === 'trade') {\n        const symbolParts = data.symbol.split(':');\n        const exchange = symbolParts[0];\n        const symbol = symbolParts[1];\n        const price = data.p;\n\n        // Update stocks\n        if (exchange === 'BSE') {\n          setStocks(prevStocks => prevStocks.map(stock => stock.symbol === symbol ? {\n            ...stock,\n            price: price,\n            change: price - (stock.price - stock.change),\n            // Calculate new change\n            changePercent: (price - (stock.price - stock.change)) / (stock.price - stock.change) * 100\n          } : stock));\n        }\n\n        // Update indices\n        if (data.symbol === 'NSE:NIFTY_50' || data.symbol === 'BSE:SENSEX') {\n          setMarketIndices(prevIndices => prevIndices.map(index => index.name === (data.symbol.includes('NIFTY') ? 'NIFTY' : 'SENSEX') ? {\n            ...index,\n            value: price,\n            change: price - (index.value - index.change),\n            changePercent: (price - (index.value - index.change)) / (index.value - index.change) * 100\n          } : index));\n        }\n      }\n    };\n    ws.onerror = err => {\n      console.error('WebSocket error:', err);\n      setError('Real-time connection failed. Showing last fetched prices.');\n    };\n    ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      setError('Real-time connection lost. Trying to reconnect...');\n      // You might want to implement reconnection logic here\n    };\n    setSocket(ws);\n    return () => {\n      if (ws) {\n        // Unsubscribe before closing\n        stocks.forEach(stock => {\n          ws.send(JSON.stringify({\n            type: 'unsubscribe',\n            symbol: `BSE:${stock.symbol}`\n          }));\n        });\n        ws.send(JSON.stringify({\n          type: 'unsubscribe',\n          symbol: 'NSE:NIFTY_50'\n        }));\n        ws.send(JSON.stringify({\n          type: 'unsubscribe',\n          symbol: 'BSE:SENSEX'\n        }));\n        ws.close();\n      }\n    };\n  }, [loading, stocks]);\n  const formatNumber = num => {\n    if (num === undefined || num === null) return '--';\n    return num.toLocaleString('en-IN', {\n      maximumFractionDigits: 2\n    });\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"watchlist-loading\",\n      children: \"Loading market data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"watchlist\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"market-indices\",\n      children: marketIndices.map((index, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"index-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"index-name\",\n          children: index.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), index.number && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"index-number\",\n          children: index.number\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 30\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"index-value\",\n          children: formatNumber(index.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `index-change ${index.change >= 0 ? 'positive' : 'negative'}`,\n          children: [index.change >= 0 ? '+' : '', formatNumber(index.change), \" (\", index.changePercent >= 0 ? '+' : '', formatNumber(index.changePercent), \"%)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"market-data-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stock-list\",\n      children: stocks.map((stock, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stock-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stock-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stock-symbol\",\n            children: stock.symbol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `stock-change ${stock.change >= 0 ? 'positive' : 'negative'}`,\n            children: [stock.change >= 0 ? '+' : '', formatNumber(stock.change)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stock-price\",\n          children: formatNumber(stock.price)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s(Watchlist, \"ZAHdSqtdGt/mA+zZjA6z8yu1JCA=\");\n_c = Watchlist;\nexport default Watchlist;\nvar _c;\n$RefreshReg$(_c, \"Watchlist\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Watchlist","_s","FINNHUB_API_KEY","marketIndices","setMarketIndices","stocks","setStocks","loading","setLoading","error","setError","socket","setSocket","fetchInitialData","niftyResponse","fetch","sensexResponse","niftyData","json","sensexData","name","number","value","c","change","d","changePercent","dp","stockSymbols","stockPromises","map","symbol","stockResponses","Promise","all","stockData","res","console","log","index","price","err","length","ws","WebSocket","onopen","forEach","stock","send","JSON","stringify","type","onmessage","e","data","parse","symbolParts","split","exchange","p","prevStocks","prevIndices","includes","onerror","onclose","close","formatNumber","num","undefined","toLocaleString","maximumFractionDigits","className","children","fileName","_jsxFileName","lineNumber","columnNumber","i","_c","$RefreshReg$"],"sources":["C:/Users/Shagun Khandelwal/zerodha/client/src/components/Watchlist/Watchlist.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Watchlist.css';\r\n\r\nconst Watchlist = () => {\r\n  const FINNHUB_API_KEY = 'd17tfrhr01qteuvpuh10d17tfrhr01qteuvpuh1g'; // Replace with your Finnhub API key\r\n  const [marketIndices, setMarketIndices] = useState([]);\r\n  const [stocks, setStocks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [socket, setSocket] = useState(null);\r\n\r\n  // Initial data fetch\r\n  useEffect(() => {\r\n    const fetchInitialData = async () => {\r\n      try {\r\n        // Fetch initial indices data\r\n        const niftyResponse = await fetch(\r\n          `https://finnhub.io/api/v1/quote?symbol=NSE:NIFTY_50&token=${FINNHUB_API_KEY}`\r\n        );\r\n        const sensexResponse = await fetch(\r\n          `https://finnhub.io/api/v1/quote?symbol=BSE:SENSEX&token=${FINNHUB_API_KEY}`\r\n        );\r\n        \r\n        const niftyData = await niftyResponse.json();\r\n        const sensexData = await sensexResponse.json();\r\n\r\n        setMarketIndices([\r\n          { \r\n            name: 'NIFTY', \r\n            number: '50', \r\n            value: niftyData.c, \r\n            change: niftyData.d, \r\n            changePercent: niftyData.dp \r\n          },\r\n          { \r\n            name: 'SENSEX', \r\n            number: '', \r\n            value: sensexData.c, \r\n            change: sensexData.d, \r\n            changePercent: sensexData.dp \r\n          }\r\n        ]);\r\n\r\n        // Define the stocks we want to track\r\n        const stockSymbols = ['AMZN', 'MSFT', 'INFY', 'AAPL'];\r\n        \r\n        // Fetch initial stock prices\r\n        const stockPromises = stockSymbols.map(symbol => \r\n          fetch(`https://finnhub.io/api/v1/quote?symbol=${symbol}&token=${FINNHUB_API_KEY}`)\r\n        );\r\n\r\n        const stockResponses = await Promise.all(stockPromises);\r\n        const stockData = await Promise.all(stockResponses.map(res => res.json()));\r\n        console.log(stockData);\r\n\r\n        setStocks(stockSymbols.map((symbol, index) => ({\r\n          symbol,\r\n          price: stockData[index].c,\r\n          change: stockData[index].d,\r\n          changePercent: stockData[index].dp\r\n        })));\r\n\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error('Initial fetch failed:', err);\r\n        setError('Failed to load initial data. Trying real-time connection...');\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchInitialData();\r\n  }, []);\r\n\r\n  // Initialize WebSocket connection after initial data is loaded\r\n  useEffect(() => {\r\n    if (loading || stocks.length === 0) return;\r\n\r\n    const ws = new WebSocket(`wss://ws.finnhub.io?token=${FINNHUB_API_KEY}`);\r\n    \r\n    ws.onopen = () => {\r\n      console.log('WebSocket connected');\r\n      // Subscribe to all stocks\r\n      stocks.forEach(stock => {\r\n        ws.send(JSON.stringify({ type: 'subscribe', symbol: `BSE:${stock.symbol}` }));\r\n      });\r\n      // Subscribe to indices\r\n      ws.send(JSON.stringify({ type: 'subscribe', symbol: 'NSE:NIFTY_50' }));\r\n      ws.send(JSON.stringify({ type: 'subscribe', symbol: 'BSE:SENSEX' }));\r\n    };\r\n\r\n    ws.onmessage = (e) => {\r\n      const data = JSON.parse(e.data);\r\n      if (data.type === 'trade') {\r\n        const symbolParts = data.symbol.split(':');\r\n        const exchange = symbolParts[0];\r\n        const symbol = symbolParts[1];\r\n        const price = data.p;\r\n\r\n        // Update stocks\r\n        if (exchange === 'BSE') {\r\n          setStocks(prevStocks => \r\n            prevStocks.map(stock => \r\n              stock.symbol === symbol \r\n                ? { \r\n                    ...stock, \r\n                    price: price,\r\n                    change: price - (stock.price - stock.change), // Calculate new change\r\n                    changePercent: ((price - (stock.price - stock.change)) / (stock.price - stock.change)) * 100\r\n                  } \r\n                : stock\r\n            )\r\n          );\r\n        }\r\n\r\n        // Update indices\r\n        if (data.symbol === 'NSE:NIFTY_50' || data.symbol === 'BSE:SENSEX') {\r\n          setMarketIndices(prevIndices => \r\n            prevIndices.map(index => \r\n              index.name === (data.symbol.includes('NIFTY') ? 'NIFTY' : 'SENSEX')\r\n                ? {\r\n                    ...index,\r\n                    value: price,\r\n                    change: price - (index.value - index.change),\r\n                    changePercent: ((price - (index.value - index.change)) / (index.value - index.change)) * 100\r\n                  }\r\n                : index\r\n            )\r\n          );\r\n        }\r\n      }\r\n    };\r\n\r\n    ws.onerror = (err) => {\r\n      console.error('WebSocket error:', err);\r\n      setError('Real-time connection failed. Showing last fetched prices.');\r\n    };\r\n\r\n    ws.onclose = () => {\r\n      console.log('WebSocket disconnected');\r\n      setError('Real-time connection lost. Trying to reconnect...');\r\n      // You might want to implement reconnection logic here\r\n    };\r\n\r\n    setSocket(ws);\r\n\r\n    return () => {\r\n      if (ws) {\r\n        // Unsubscribe before closing\r\n        stocks.forEach(stock => {\r\n          ws.send(JSON.stringify({ type: 'unsubscribe', symbol: `BSE:${stock.symbol}` }));\r\n        });\r\n        ws.send(JSON.stringify({ type: 'unsubscribe', symbol: 'NSE:NIFTY_50' }));\r\n        ws.send(JSON.stringify({ type: 'unsubscribe', symbol: 'BSE:SENSEX' }));\r\n        ws.close();\r\n      }\r\n    };\r\n  }, [loading, stocks]);\r\n\r\n  const formatNumber = (num) => {\r\n    if (num === undefined || num === null) return '--';\r\n    return num.toLocaleString('en-IN', { maximumFractionDigits: 2 });\r\n  };\r\n\r\n  if (loading) {\r\n    return <div className=\"watchlist-loading\">Loading market data...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"watchlist\">\r\n      {/* Market Indices */}\r\n      <div className=\"market-indices\">\r\n        {marketIndices.map((index, i) => (\r\n          <div key={i} className=\"index-card\">\r\n            <div className=\"index-name\">{index.name}</div>\r\n            {index.number && <div className=\"index-number\">{index.number}</div>}\r\n            <div className=\"index-value\">{formatNumber(index.value)}</div>\r\n            <div className={`index-change ${index.change >= 0 ? 'positive' : 'negative'}`}>\r\n              {index.change >= 0 ? '+' : ''}{formatNumber(index.change)} ({index.changePercent >= 0 ? '+' : ''}{formatNumber(index.changePercent)}%)\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"market-data-error\">\r\n          {error}\r\n        </div>\r\n      )}\r\n\r\n      {/* Stock List */}\r\n      <div className=\"stock-list\">\r\n        {stocks.map((stock, i) => (\r\n          <div key={i} className=\"stock-row\">\r\n            <div className=\"stock-info\">\r\n              <div className=\"stock-symbol\">{stock.symbol}</div>\r\n              <div className={`stock-change ${stock.change >= 0 ? 'positive' : 'negative'}`}>\r\n                {stock.change >= 0 ? '+' : ''}{formatNumber(stock.change)}\r\n              </div>\r\n            </div>\r\n            <div className=\"stock-price\">{formatNumber(stock.price)}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Watchlist;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}