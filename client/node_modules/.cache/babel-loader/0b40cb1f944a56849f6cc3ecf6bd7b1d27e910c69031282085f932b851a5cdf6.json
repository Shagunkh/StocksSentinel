{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shagun Khandelwal\\\\zerodha\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useState, useEffect } from 'react';\n// import authService from '../api/auth';\n\n// const AuthContext = createContext();\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\n//   const [isLoading, setIsLoading] = useState(true);\n\n//   useEffect(() => {\n//     const checkAuth = async () => {\n//       try {\n//         const user = JSON.parse(localStorage.getItem('user'));\n//         if (user && user.token) {\n//           setUser(user);\n//           setIsAuthenticated(true);\n//         }\n//       } catch (error) {\n//         console.error('Auth check error:', error);\n//       } finally {\n//         setIsLoading(false);\n//       }\n//     };\n//     checkAuth();\n//   }, []);\n\n//   const register = async (userData) => {\n//   try {\n//     const data = await authService.register(userData);\n//     if (data.token) {\n//       setUser(data.user);\n//       setIsAuthenticated(true);\n//       localStorage.setItem('user', JSON.stringify(data));\n//       return { success: true };\n//     }\n//     return { success: false, message: 'Registration failed' };\n//   } catch (error) {\n//     return { success: false, message: error.message || 'Registration failed' };\n//   }\n// };\n\n//   const login = async (userData) => {\n//     try {\n//       const data = await authService.login(userData);\n//       setUser(data);\n//       setIsAuthenticated(true);\n//       return { success: true };\n//     } catch (error) {\n//       return { success: false, message: error.response?.data?.message || 'Login failed' };\n//     }\n//   };\n\n//   const logout = () => {\n//     authService.logout();\n//     setUser(null);\n//     setIsAuthenticated(false);\n//   };\n\n//   return (\n//     <AuthContext.Provider\n//       value={{\n//         user,\n//         isAuthenticated,\n//         isLoading,\n//         register,\n//         login,\n//         logout,\n//       }}\n//     >\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export const useAuth = () => React.useContext(AuthContext);\n\n// client/src/context/AuthContext.js\n// client/src/context/AuthContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport authService from '../api/auth';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // In your AuthContext.js, modify the initializeAuth function:\n    // Modify the initializeAuth function\n    const initializeAuth = async () => {\n      try {\n        const storedUser = localStorage.getItem('user');\n        if (storedUser) {\n          const parsedUser = JSON.parse(storedUser);\n\n          // Verify we have both token and user data\n          if (parsedUser !== null && parsedUser !== void 0 && parsedUser.token && parsedUser !== null && parsedUser !== void 0 && parsedUser.user) {\n            try {\n              // Verify token structure first\n              if (typeof parsedUser.token !== 'string' || parsedUser.token.split('.').length !== 3) {\n                throw new Error('Invalid token format');\n              }\n              const response = await axios.get('/api/auth/user', {\n                headers: {\n                  'Authorization': `Bearer ${parsedUser.token}`\n                }\n              });\n              if (response.data.success) {\n                setUser({\n                  ...response.data.user,\n                  token: parsedUser.token\n                });\n                setIsAuthenticated(true);\n\n                // Update localStorage with fresh data\n                localStorage.setItem('user', JSON.stringify({\n                  token: parsedUser.token,\n                  user: response.data.user\n                }));\n              }\n            } catch (error) {\n              console.error('Error fetching user data:', error);\n              // Fallback to stored user data but mark as potentially stale\n              setUser(parsedUser.user);\n              setIsAuthenticated(true);\n              localStorage.removeItem('user'); // Clear invalid token\n            }\n          } else {\n            // Invalid storage format - clear it\n            localStorage.removeItem('user');\n          }\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        localStorage.removeItem('user');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n  const register = async userData => {\n    try {\n      const data = await authService.register(userData);\n      if (data.token) {\n        const userObj = {\n          token: data.token,\n          user: data.user\n        };\n        localStorage.setItem('user', JSON.stringify(userObj));\n        setUser(data.user);\n        setIsAuthenticated(true);\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        message: 'Registration failed - no token received'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Registration failed'\n      };\n    }\n  };\n  const login = async userData => {\n    try {\n      const data = await authService.login(userData);\n      if (data.token) {\n        const userObj = {\n          token: data.token,\n          user: data.user\n        };\n        localStorage.setItem('user', JSON.stringify(userObj));\n        setUser(data.user);\n        setIsAuthenticated(true);\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        message: 'Login failed - no token received'\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed'\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('user');\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const updateWalletBalance = newBalance => {\n    setUser(prev => {\n      if (!prev) return prev; // Safety check\n\n      const updatedUser = {\n        ...prev,\n        walletBalance: newBalance\n      };\n\n      // Update localStorage\n      const storedUser = localStorage.getItem('user');\n      if (storedUser) {\n        const parsedUser = JSON.parse(storedUser);\n        localStorage.setItem('user', JSON.stringify({\n          ...parsedUser,\n          user: updatedUser\n        }));\n      }\n      return updatedUser;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      isLoading,\n      register,\n      login,\n      logout,\n      updateWalletBalance\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"v1LRzRO747hYRtRdhUIJv9BiM4M=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return React.useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","authService","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","initializeAuth","storedUser","localStorage","getItem","parsedUser","JSON","parse","token","split","length","Error","response","get","headers","data","success","setItem","stringify","error","console","removeItem","register","userData","userObj","message","login","_error$response","_error$response$data","logout","updateWalletBalance","newBalance","prev","updatedUser","walletBalance","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","useContext","$RefreshReg$"],"sources":["C:/Users/Shagun Khandelwal/zerodha/client/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useState, useEffect } from 'react';\r\n// import authService from '../api/auth';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null);\r\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n//   const [isLoading, setIsLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const checkAuth = async () => {\r\n//       try {\r\n//         const user = JSON.parse(localStorage.getItem('user'));\r\n//         if (user && user.token) {\r\n//           setUser(user);\r\n//           setIsAuthenticated(true);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error('Auth check error:', error);\r\n//       } finally {\r\n//         setIsLoading(false);\r\n//       }\r\n//     };\r\n//     checkAuth();\r\n//   }, []);\r\n\r\n//   const register = async (userData) => {\r\n//   try {\r\n//     const data = await authService.register(userData);\r\n//     if (data.token) {\r\n//       setUser(data.user);\r\n//       setIsAuthenticated(true);\r\n//       localStorage.setItem('user', JSON.stringify(data));\r\n//       return { success: true };\r\n//     }\r\n//     return { success: false, message: 'Registration failed' };\r\n//   } catch (error) {\r\n//     return { success: false, message: error.message || 'Registration failed' };\r\n//   }\r\n// };\r\n\r\n//   const login = async (userData) => {\r\n//     try {\r\n//       const data = await authService.login(userData);\r\n//       setUser(data);\r\n//       setIsAuthenticated(true);\r\n//       return { success: true };\r\n//     } catch (error) {\r\n//       return { success: false, message: error.response?.data?.message || 'Login failed' };\r\n//     }\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     authService.logout();\r\n//     setUser(null);\r\n//     setIsAuthenticated(false);\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider\r\n//       value={{\r\n//         user,\r\n//         isAuthenticated,\r\n//         isLoading,\r\n//         register,\r\n//         login,\r\n//         logout,\r\n//       }}\r\n//     >\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export const useAuth = () => React.useContext(AuthContext);\r\n\r\n// client/src/context/AuthContext.js\r\n// client/src/context/AuthContext.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport authService from '../api/auth';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // In your AuthContext.js, modify the initializeAuth function:\r\n// Modify the initializeAuth function\r\nconst initializeAuth = async () => {\r\n  try {\r\n    const storedUser = localStorage.getItem('user');\r\n    if (storedUser) {\r\n      const parsedUser = JSON.parse(storedUser);\r\n      \r\n      // Verify we have both token and user data\r\n      if (parsedUser?.token && parsedUser?.user) {\r\n        try {\r\n          // Verify token structure first\r\n          if (typeof parsedUser.token !== 'string' || parsedUser.token.split('.').length !== 3) {\r\n            throw new Error('Invalid token format');\r\n          }\r\n\r\n          const response = await axios.get('/api/auth/user', {\r\n            headers: {\r\n              'Authorization': `Bearer ${parsedUser.token}`\r\n            }\r\n          });\r\n\r\n          if (response.data.success) {\r\n            setUser({\r\n              ...response.data.user,\r\n              token: parsedUser.token\r\n            });\r\n            setIsAuthenticated(true);\r\n            \r\n            // Update localStorage with fresh data\r\n            localStorage.setItem('user', JSON.stringify({\r\n              token: parsedUser.token,\r\n              user: response.data.user\r\n            }));\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching user data:', error);\r\n          // Fallback to stored user data but mark as potentially stale\r\n          setUser(parsedUser.user);\r\n          setIsAuthenticated(true);\r\n          localStorage.removeItem('user'); // Clear invalid token\r\n        }\r\n      } else {\r\n        // Invalid storage format - clear it\r\n        localStorage.removeItem('user');\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Auth initialization error:', error);\r\n    localStorage.removeItem('user');\r\n  } finally {\r\n    setIsLoading(false);\r\n  }\r\n};\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      const data = await authService.register(userData);\r\n      if (data.token) {\r\n        const userObj = {\r\n          token: data.token,\r\n          user: data.user\r\n        };\r\n        localStorage.setItem('user', JSON.stringify(userObj));\r\n        setUser(data.user);\r\n        setIsAuthenticated(true);\r\n        return { success: true };\r\n      }\r\n      return { success: false, message: 'Registration failed - no token received' };\r\n    } catch (error) {\r\n      return { \r\n        success: false, \r\n        message: error.message || 'Registration failed' \r\n      };\r\n    }\r\n  };\r\n\r\n  const login = async (userData) => {\r\n    try {\r\n      const data = await authService.login(userData);\r\n      if (data.token) {\r\n        const userObj = {\r\n          token: data.token,\r\n          user: data.user\r\n        };\r\n        localStorage.setItem('user', JSON.stringify(userObj));\r\n        setUser(data.user);\r\n        setIsAuthenticated(true);\r\n        return { success: true };\r\n      }\r\n      return { success: false, message: 'Login failed - no token received' };\r\n    } catch (error) {\r\n      return { \r\n        success: false, \r\n        message: error.response?.data?.message || 'Login failed' \r\n      };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  const updateWalletBalance = (newBalance) => {\r\n    setUser(prev => {\r\n      if (!prev) return prev;  // Safety check\r\n      \r\n      const updatedUser = { ...prev, walletBalance: newBalance };\r\n      \r\n      // Update localStorage\r\n      const storedUser = localStorage.getItem('user');\r\n      if (storedUser) {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        localStorage.setItem('user', JSON.stringify({\r\n          ...parsedUser,\r\n          user: updatedUser\r\n        }));\r\n      }\r\n      \r\n      return updatedUser;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        isAuthenticated,\r\n        isLoading,\r\n        register,\r\n        login,\r\n        logout,\r\n        updateWalletBalance\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => React.useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}