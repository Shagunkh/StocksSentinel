{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shagun Khandelwal\\\\zerodha\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useState, useEffect } from 'react';\n// import authService from '../api/auth';\n\n// const AuthContext = createContext();\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\n//   const [isLoading, setIsLoading] = useState(true);\n\n//   useEffect(() => {\n//     const checkAuth = async () => {\n//       try {\n//         const user = JSON.parse(localStorage.getItem('user'));\n//         if (user && user.token) {\n//           setUser(user);\n//           setIsAuthenticated(true);\n//         }\n//       } catch (error) {\n//         console.error('Auth check error:', error);\n//       } finally {\n//         setIsLoading(false);\n//       }\n//     };\n//     checkAuth();\n//   }, []);\n\n//   const register = async (userData) => {\n//   try {\n//     const data = await authService.register(userData);\n//     if (data.token) {\n//       setUser(data.user);\n//       setIsAuthenticated(true);\n//       localStorage.setItem('user', JSON.stringify(data));\n//       return { success: true };\n//     }\n//     return { success: false, message: 'Registration failed' };\n//   } catch (error) {\n//     return { success: false, message: error.message || 'Registration failed' };\n//   }\n// };\n\n//   const login = async (userData) => {\n//     try {\n//       const data = await authService.login(userData);\n//       setUser(data);\n//       setIsAuthenticated(true);\n//       return { success: true };\n//     } catch (error) {\n//       return { success: false, message: error.response?.data?.message || 'Login failed' };\n//     }\n//   };\n\n//   const logout = () => {\n//     authService.logout();\n//     setUser(null);\n//     setIsAuthenticated(false);\n//   };\n\n//   return (\n//     <AuthContext.Provider\n//       value={{\n//         user,\n//         isAuthenticated,\n//         isLoading,\n//         register,\n//         login,\n//         logout,\n//       }}\n//     >\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export const useAuth = () => React.useContext(AuthContext);\n\n// client/src/context/AuthContext.js\n// client/src/context/AuthContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport authService from '../api/auth';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const storedUser = localStorage.getItem('user');\n        if (!storedUser) {\n          setIsLoading(false);\n          return;\n        }\n        const parsedUser = JSON.parse(storedUser);\n        if (!(parsedUser !== null && parsedUser !== void 0 && parsedUser.token) || !(parsedUser !== null && parsedUser !== void 0 && parsedUser.user)) {\n          localStorage.removeItem('user');\n          setIsLoading(false);\n          return;\n        }\n\n        // Verify token structure\n        const tokenParts = parsedUser.token.split('.');\n        if (tokenParts.length !== 3) {\n          localStorage.removeItem('user');\n          setIsLoading(false);\n          return;\n        }\n        try {\n          var _response$data;\n          const response = await axios.get('/api/auth/user', {\n            headers: {\n              Authorization: `Bearer ${parsedUser.token}`\n            }\n          });\n          if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.success) {\n            setUser(response.data.user);\n            setIsAuthenticated(true);\n            // Update storage with fresh data\n            localStorage.setItem('user', JSON.stringify({\n              token: parsedUser.token,\n              user: response.data.user\n            }));\n          } else {\n            localStorage.removeItem('user');\n          }\n        } catch (error) {\n          console.error('User validation failed:', error);\n          localStorage.removeItem('user');\n        }\n      } catch (error) {\n        console.error('Auth init error:', error);\n        localStorage.removeItem('user');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n  const register = async userData => {\n    try {\n      const data = await authService.register(userData);\n      if (data.token && data.user) {\n        localStorage.setItem('user', JSON.stringify({\n          token: data.token,\n          user: data.user\n        }));\n        setUser(data.user);\n        setIsAuthenticated(true);\n        return {\n          success: true,\n          user: data.user\n        };\n      }\n      return {\n        success: false,\n        message: 'Registration failed'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Registration failed'\n      };\n    }\n  };\n  const login = async userData => {\n    try {\n      const data = await authService.login(userData);\n      if (data.token && data.user) {\n        localStorage.setItem('user', JSON.stringify({\n          token: data.token,\n          user: data.user\n        }));\n        setUser(data.user);\n        setIsAuthenticated(true);\n        return {\n          success: true,\n          user: data.user\n        };\n      }\n      return {\n        success: false,\n        message: 'Login failed'\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed'\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('user');\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const updateWalletBalance = newBalance => {\n    setUser(prev => {\n      if (!prev) return prev;\n      const updatedUser = {\n        ...prev,\n        walletBalance: newBalance\n      };\n      const storedUser = localStorage.getItem('user');\n      if (storedUser) {\n        try {\n          const parsed = JSON.parse(storedUser);\n          localStorage.setItem('user', JSON.stringify({\n            token: parsed.token,\n            user: updatedUser\n          }));\n        } catch (err) {\n          console.error('Failed to update localStorage:', err);\n        }\n      }\n      return updatedUser;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      isLoading,\n      register,\n      login,\n      logout,\n      updateWalletBalance\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"v1LRzRO747hYRtRdhUIJv9BiM4M=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return React.useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","authService","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","initializeAuth","storedUser","localStorage","getItem","parsedUser","JSON","parse","token","removeItem","tokenParts","split","length","_response$data","response","get","headers","Authorization","data","success","setItem","stringify","error","console","register","userData","message","login","_error$response","_error$response$data","logout","updateWalletBalance","newBalance","prev","updatedUser","walletBalance","parsed","err","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","useContext","$RefreshReg$"],"sources":["C:/Users/Shagun Khandelwal/zerodha/client/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useState, useEffect } from 'react';\r\n// import authService from '../api/auth';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null);\r\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n//   const [isLoading, setIsLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const checkAuth = async () => {\r\n//       try {\r\n//         const user = JSON.parse(localStorage.getItem('user'));\r\n//         if (user && user.token) {\r\n//           setUser(user);\r\n//           setIsAuthenticated(true);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error('Auth check error:', error);\r\n//       } finally {\r\n//         setIsLoading(false);\r\n//       }\r\n//     };\r\n//     checkAuth();\r\n//   }, []);\r\n\r\n//   const register = async (userData) => {\r\n//   try {\r\n//     const data = await authService.register(userData);\r\n//     if (data.token) {\r\n//       setUser(data.user);\r\n//       setIsAuthenticated(true);\r\n//       localStorage.setItem('user', JSON.stringify(data));\r\n//       return { success: true };\r\n//     }\r\n//     return { success: false, message: 'Registration failed' };\r\n//   } catch (error) {\r\n//     return { success: false, message: error.message || 'Registration failed' };\r\n//   }\r\n// };\r\n\r\n//   const login = async (userData) => {\r\n//     try {\r\n//       const data = await authService.login(userData);\r\n//       setUser(data);\r\n//       setIsAuthenticated(true);\r\n//       return { success: true };\r\n//     } catch (error) {\r\n//       return { success: false, message: error.response?.data?.message || 'Login failed' };\r\n//     }\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     authService.logout();\r\n//     setUser(null);\r\n//     setIsAuthenticated(false);\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider\r\n//       value={{\r\n//         user,\r\n//         isAuthenticated,\r\n//         isLoading,\r\n//         register,\r\n//         login,\r\n//         logout,\r\n//       }}\r\n//     >\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export const useAuth = () => React.useContext(AuthContext);\r\n\r\n// client/src/context/AuthContext.js\r\n// client/src/context/AuthContext.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport authService from '../api/auth';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const initializeAuth = async () => {\r\n      try {\r\n        const storedUser = localStorage.getItem('user');\r\n        if (!storedUser) {\r\n          setIsLoading(false);\r\n          return;\r\n        }\r\n\r\n        const parsedUser = JSON.parse(storedUser);\r\n        if (!parsedUser?.token || !parsedUser?.user) {\r\n          localStorage.removeItem('user');\r\n          setIsLoading(false);\r\n          return;\r\n        }\r\n\r\n        // Verify token structure\r\n        const tokenParts = parsedUser.token.split('.');\r\n        if (tokenParts.length !== 3) {\r\n          localStorage.removeItem('user');\r\n          setIsLoading(false);\r\n          return;\r\n        }\r\n\r\n        try {\r\n          const response = await axios.get('/api/auth/user', {\r\n            headers: { Authorization: `Bearer ${parsedUser.token}` }\r\n          });\r\n\r\n          if (response.data?.success) {\r\n            setUser(response.data.user);\r\n            setIsAuthenticated(true);\r\n            // Update storage with fresh data\r\n            localStorage.setItem('user', JSON.stringify({\r\n              token: parsedUser.token,\r\n              user: response.data.user\r\n            }));\r\n          } else {\r\n            localStorage.removeItem('user');\r\n          }\r\n        } catch (error) {\r\n          console.error('User validation failed:', error);\r\n          localStorage.removeItem('user');\r\n        }\r\n      } catch (error) {\r\n        console.error('Auth init error:', error);\r\n        localStorage.removeItem('user');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      const data = await authService.register(userData);\r\n      if (data.token && data.user) {\r\n        localStorage.setItem('user', JSON.stringify({\r\n          token: data.token,\r\n          user: data.user\r\n        }));\r\n        setUser(data.user);\r\n        setIsAuthenticated(true);\r\n        return { success: true, user: data.user };\r\n      }\r\n      return { success: false, message: 'Registration failed' };\r\n    } catch (error) {\r\n      return { \r\n        success: false, \r\n        message: error.message || 'Registration failed' \r\n      };\r\n    }\r\n  };\r\n\r\nconst login = async (userData) => {\r\n  try {\r\n    const data = await authService.login(userData);\r\n    if (data.token && data.user) {\r\n      localStorage.setItem('user', JSON.stringify({\r\n        token: data.token,\r\n        user: data.user\r\n      }));\r\n      setUser(data.user);\r\n      setIsAuthenticated(true);\r\n      return { success: true, user: data.user };\r\n    }\r\n    return { success: false, message: 'Login failed' };\r\n  } catch (error) {\r\n    return { \r\n      success: false, \r\n      message: error.response?.data?.message || 'Login failed' \r\n    };\r\n  }\r\n};\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  const updateWalletBalance = (newBalance) => {\r\n    setUser(prev => {\r\n      if (!prev) return prev;\r\n      \r\n      const updatedUser = { ...prev, walletBalance: newBalance };\r\n      const storedUser = localStorage.getItem('user');\r\n      \r\n      if (storedUser) {\r\n        try {\r\n          const parsed = JSON.parse(storedUser);\r\n          localStorage.setItem('user', JSON.stringify({\r\n            token: parsed.token,\r\n            user: updatedUser\r\n          }));\r\n        } catch (err) {\r\n          console.error('Failed to update localStorage:', err);\r\n        }\r\n      }\r\n      \r\n      return updatedUser;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        isAuthenticated,\r\n        isLoading,\r\n        register,\r\n        login,\r\n        logout,\r\n        updateWalletBalance\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => React.useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}