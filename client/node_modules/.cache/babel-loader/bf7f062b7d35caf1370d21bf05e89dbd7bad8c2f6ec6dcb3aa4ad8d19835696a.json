{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/auth';\nconst register = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/register`, userData);\n    if (response.data.token) {\n      localStorage.setItem('user', JSON.stringify(response.data));\n    }\n    return response.data;\n  } catch (error) {\n    // Handle error response from server\n    if (error.response) {\n      var _error$response$data, _error$response$data$, _error$response$data$2, _error$response$data2;\n      throw new Error(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.errors) === null || _error$response$data$ === void 0 ? void 0 : (_error$response$data$2 = _error$response$data$[0]) === null || _error$response$data$2 === void 0 ? void 0 : _error$response$data$2.msg) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || 'Registration failed');\n    } else {\n      throw new Error('Network error. Please try again.');\n    }\n  }\n};\nconst login = async userData => {\n  const response = await axios.post(`${API_URL}/login`, userData);\n  if (response.data.token) {\n    localStorage.setItem('user', JSON.stringify(response.data));\n  }\n  return response.data;\n};\nconst logout = () => {\n  localStorage.removeItem('user');\n};\nconst authService = {\n  register,\n  login,\n  logout\n};\nexport const updateFunds = async fundsData => {\n  try {\n    const response = await api.post('/funds', fundsData);\n    if (!response.data.success) {\n      throw new Error(response.data.message || 'Transaction failed');\n    }\n    return response.data;\n  } catch (error) {\n    // Handle different error scenarios\n    if (error.response) {\n      var _error$response$data3;\n      // The request was made and the server responded with a status code\n      throw new Error(((_error$response$data3 = error.response.data) === null || _error$response$data3 === void 0 ? void 0 : _error$response$data3.message) || error.response.statusText);\n    } else if (error.request) {\n      // The request was made but no response was received\n      throw new Error('No response from server. Please check your connection.');\n    } else {\n      // Something happened in setting up the request\n      throw new Error(error.message || 'Request setup failed');\n    }\n  }\n};\nexport default authService;","map":{"version":3,"names":["axios","API_URL","register","userData","response","post","data","token","localStorage","setItem","JSON","stringify","error","_error$response$data","_error$response$data$","_error$response$data$2","_error$response$data2","Error","errors","msg","message","login","logout","removeItem","authService","updateFunds","fundsData","api","success","_error$response$data3","statusText","request"],"sources":["C:/Users/Shagun Khandelwal/zerodha/client/src/api/auth.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/auth';\r\n\r\nconst register = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/register`, userData);\r\n    if (response.data.token) {\r\n      localStorage.setItem('user', JSON.stringify(response.data));\r\n    }\r\n    return response.data;\r\n  } catch (error) {\r\n    // Handle error response from server\r\n    if (error.response) {\r\n      throw new Error(\r\n        error.response.data?.errors?.[0]?.msg || \r\n        error.response.data?.message || \r\n        'Registration failed'\r\n      );\r\n    } else {\r\n      throw new Error('Network error. Please try again.');\r\n    }\r\n  }\r\n};\r\n\r\nconst login = async (userData) => {\r\n  const response = await axios.post(`${API_URL}/login`, userData);\r\n  if (response.data.token) {\r\n    localStorage.setItem('user', JSON.stringify(response.data));\r\n  }\r\n  return response.data;\r\n};\r\n\r\nconst logout = () => {\r\n  localStorage.removeItem('user');\r\n};\r\n\r\nconst authService = {\r\n  register,\r\n  login,\r\n  logout,\r\n};\r\n\r\nexport const updateFunds = async (fundsData) => {\r\n  try {\r\n    const response = await api.post('/funds', fundsData);\r\n    \r\n    if (!response.data.success) {\r\n      throw new Error(response.data.message || 'Transaction failed');\r\n    }\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    // Handle different error scenarios\r\n    if (error.response) {\r\n      // The request was made and the server responded with a status code\r\n      throw new Error(error.response.data?.message || error.response.statusText);\r\n    } else if (error.request) {\r\n      // The request was made but no response was received\r\n      throw new Error('No response from server. Please check your connection.');\r\n    } else {\r\n      // Something happened in setting up the request\r\n      throw new Error(error.message || 'Request setup failed');\r\n    }\r\n  }\r\n};\r\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}