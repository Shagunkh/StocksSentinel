{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/auth';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL\n});\napi.interceptors.request.use(config => {\n  try {\n    const userData = localStorage.getItem('user');\n    if (userData) {\n      const user = JSON.parse(userData);\n      if (user !== null && user !== void 0 && user.token) {\n        config.headers.Authorization = `Bearer ${user.token}`;\n      }\n    }\n  } catch (error) {\n    console.error('Error parsing user data:', error);\n    localStorage.removeItem('user');\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Enhanced response interceptor\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nconst getAuthHeader = () => {\n  const userData = localStorage.getItem('user');\n  if (userData) {\n    const user = JSON.parse(userData);\n    if (user !== null && user !== void 0 && user.token) {\n      return {\n        Authorization: `Bearer ${user.token}`\n      };\n    }\n  }\n  return {};\n};\nconst register = async userData => {\n  try {\n    const response = await api.post('/register', userData);\n    if (response.data.token) {\n      localStorage.setItem('user', JSON.stringify(response.data));\n    }\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      var _error$response$data, _error$response$data$, _error$response$data$2, _error$response$data2;\n      throw new Error(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.errors) === null || _error$response$data$ === void 0 ? void 0 : (_error$response$data$2 = _error$response$data$[0]) === null || _error$response$data$2 === void 0 ? void 0 : _error$response$data$2.msg) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || 'Registration failed');\n    } else {\n      throw new Error('Network error. Please try again.');\n    }\n  }\n};\nconst login = async userData => {\n  const response = await api.post('/login', userData);\n  if (response.data.token) {\n    localStorage.setItem('user', JSON.stringify({\n      token: response.data.token,\n      user: response.data.user\n    }));\n  }\n  return response.data;\n};\nconst logout = () => {\n  localStorage.removeItem('user');\n};\nconst getUser = async () => {\n  const response = await api.get('/user');\n  return response.data;\n};\nconst updateFunds = async fundsData => {\n  const response = await api.post('/funds', fundsData);\n  return response.data;\n};\nconst authService = {\n  register,\n  login,\n  logout,\n  getUser,\n  updateFunds\n};\nexport default authService;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","interceptors","request","use","config","userData","localStorage","getItem","user","JSON","parse","token","headers","Authorization","error","console","removeItem","Promise","reject","response","_error$response","status","window","location","href","getAuthHeader","register","post","data","setItem","stringify","_error$response$data","_error$response$data$","_error$response$data$2","_error$response$data2","Error","errors","msg","message","login","logout","getUser","get","updateFunds","fundsData","authService"],"sources":["C:/Users/Shagun Khandelwal/zerodha/client/src/api/auth.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/auth';\r\n\r\n// Create axios instance with base URL\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n});\r\n\r\napi.interceptors.request.use((config) => {\r\n  try {\r\n    const userData = localStorage.getItem('user');\r\n    if (userData) {\r\n      const user = JSON.parse(userData);\r\n      if (user?.token) {\r\n        config.headers.Authorization = `Bearer ${user.token}`;\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error parsing user data:', error);\r\n    localStorage.removeItem('user');\r\n  }\r\n  return config;\r\n}, (error) => {\r\n  return Promise.reject(error);\r\n});\r\n\r\n// Enhanced response interceptor\r\napi.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nconst getAuthHeader = () => {\r\n  const userData = localStorage.getItem('user');\r\n  if (userData) {\r\n    const user = JSON.parse(userData);\r\n    if (user?.token) {\r\n      return { Authorization: `Bearer ${user.token}` };\r\n    }\r\n  }\r\n  return {};\r\n};\r\n\r\nconst register = async (userData) => {\r\n  try {\r\n    const response = await api.post('/register', userData);\r\n    if (response.data.token) {\r\n      localStorage.setItem('user', JSON.stringify(response.data));\r\n    }\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response) {\r\n      throw new Error(\r\n        error.response.data?.errors?.[0]?.msg || \r\n        error.response.data?.message || \r\n        'Registration failed'\r\n      );\r\n    } else {\r\n      throw new Error('Network error. Please try again.');\r\n    }\r\n  }\r\n};\r\n\r\nconst login = async (userData) => {\r\n  const response = await api.post('/login', userData);\r\n  if (response.data.token) {\r\n    localStorage.setItem('user', JSON.stringify({\r\n      token: response.data.token,\r\n      user: response.data.user\r\n    }));\r\n  }\r\n  return response.data;\r\n};\r\n\r\nconst logout = () => {\r\n  localStorage.removeItem('user');\r\n};\r\n\r\nconst getUser = async () => {\r\n  const response = await api.get('/user');\r\n  return response.data;\r\n};\r\n\r\nconst updateFunds = async (fundsData) => {\r\n  const response = await api.post('/funds', fundsData);\r\n  return response.data;\r\n};\r\n\r\nconst authService = {\r\n  register,\r\n  login,\r\n  logout,\r\n  getUser,\r\n  updateFunds,\r\n};\r\n\r\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}