{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shagun Khandelwal\\\\zerodha\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useState, useEffect } from 'react';\n// import authService from '../api/auth';\n\n// const AuthContext = createContext();\n\n// export const AuthProvider = ({ children }) => {\n//   const [user, setUser] = useState(null);\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\n//   const [isLoading, setIsLoading] = useState(true);\n\n//   useEffect(() => {\n//     const checkAuth = async () => {\n//       try {\n//         const user = JSON.parse(localStorage.getItem('user'));\n//         if (user && user.token) {\n//           setUser(user);\n//           setIsAuthenticated(true);\n//         }\n//       } catch (error) {\n//         console.error('Auth check error:', error);\n//       } finally {\n//         setIsLoading(false);\n//       }\n//     };\n//     checkAuth();\n//   }, []);\n\n//   const register = async (userData) => {\n//   try {\n//     const data = await authService.register(userData);\n//     if (data.token) {\n//       setUser(data.user);\n//       setIsAuthenticated(true);\n//       localStorage.setItem('user', JSON.stringify(data));\n//       return { success: true };\n//     }\n//     return { success: false, message: 'Registration failed' };\n//   } catch (error) {\n//     return { success: false, message: error.message || 'Registration failed' };\n//   }\n// };\n\n//   const login = async (userData) => {\n//     try {\n//       const data = await authService.login(userData);\n//       setUser(data);\n//       setIsAuthenticated(true);\n//       return { success: true };\n//     } catch (error) {\n//       return { success: false, message: error.response?.data?.message || 'Login failed' };\n//     }\n//   };\n\n//   const logout = () => {\n//     authService.logout();\n//     setUser(null);\n//     setIsAuthenticated(false);\n//   };\n\n//   return (\n//     <AuthContext.Provider\n//       value={{\n//         user,\n//         isAuthenticated,\n//         isLoading,\n//         register,\n//         login,\n//         logout,\n//       }}\n//     >\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export const useAuth = () => React.useContext(AuthContext);\n\n// client/src/context/AuthContext.js\n// client/src/context/AuthContext.js\nimport React, { createContext, useState, useEffect } from 'react';\nimport authService from '../api/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const userData = localStorage.getItem('user');\n        if (userData) {\n          const parsedUser = JSON.parse(userData);\n          if (parsedUser !== null && parsedUser !== void 0 && parsedUser.token) {\n            const {\n              data\n            } = await authService.getUser();\n            setUser(data.user);\n            setIsAuthenticated(true);\n\n            // Update localStorage with fresh data\n            localStorage.setItem('user', JSON.stringify({\n              token: parsedUser.token,\n              user: data.user\n            }));\n          }\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        logout();\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n  const register = async userData => {\n    try {\n      const data = await authService.register(userData);\n      if (data.token) {\n        const userObj = {\n          token: data.token,\n          user: data.user\n        };\n        localStorage.setItem('user', JSON.stringify(userObj));\n        setUser(data.user);\n        setIsAuthenticated(true);\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        message: 'Registration failed - no token received'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: error.message || 'Registration failed'\n      };\n    }\n  };\n  const login = async userData => {\n    try {\n      const data = await authService.login(userData);\n      if (data.token) {\n        const userObj = {\n          token: data.token,\n          user: data.user\n        };\n        localStorage.setItem('user', JSON.stringify(userObj));\n        setUser(data.user);\n        setIsAuthenticated(true);\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        message: 'Login failed - no token received'\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        success: false,\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed'\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('user');\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const updateWalletBalance = newBalance => {\n    setUser(prev => {\n      const updatedUser = {\n        ...prev,\n        walletBalance: newBalance\n      };\n\n      // Update localStorage\n      const storedUser = localStorage.getItem('user');\n      if (storedUser) {\n        const parsedUser = JSON.parse(storedUser);\n        localStorage.setItem('user', JSON.stringify({\n          ...parsedUser,\n          user: updatedUser\n        }));\n      }\n      return updatedUser;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      isLoading,\n      register,\n      login,\n      logout,\n      updateWalletBalance\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"v1LRzRO747hYRtRdhUIJv9BiM4M=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return React.useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","initializeAuth","userData","localStorage","getItem","parsedUser","JSON","parse","token","data","getUser","setItem","stringify","error","console","logout","register","userObj","success","message","login","_error$response","_error$response$data","response","removeItem","updateWalletBalance","newBalance","prev","updatedUser","walletBalance","storedUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","useContext","$RefreshReg$"],"sources":["C:/Users/Shagun Khandelwal/zerodha/client/src/context/AuthContext.js"],"sourcesContent":["// import React, { createContext, useState, useEffect } from 'react';\r\n// import authService from '../api/auth';\r\n\r\n// const AuthContext = createContext();\r\n\r\n// export const AuthProvider = ({ children }) => {\r\n//   const [user, setUser] = useState(null);\r\n//   const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n//   const [isLoading, setIsLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const checkAuth = async () => {\r\n//       try {\r\n//         const user = JSON.parse(localStorage.getItem('user'));\r\n//         if (user && user.token) {\r\n//           setUser(user);\r\n//           setIsAuthenticated(true);\r\n//         }\r\n//       } catch (error) {\r\n//         console.error('Auth check error:', error);\r\n//       } finally {\r\n//         setIsLoading(false);\r\n//       }\r\n//     };\r\n//     checkAuth();\r\n//   }, []);\r\n\r\n//   const register = async (userData) => {\r\n//   try {\r\n//     const data = await authService.register(userData);\r\n//     if (data.token) {\r\n//       setUser(data.user);\r\n//       setIsAuthenticated(true);\r\n//       localStorage.setItem('user', JSON.stringify(data));\r\n//       return { success: true };\r\n//     }\r\n//     return { success: false, message: 'Registration failed' };\r\n//   } catch (error) {\r\n//     return { success: false, message: error.message || 'Registration failed' };\r\n//   }\r\n// };\r\n\r\n//   const login = async (userData) => {\r\n//     try {\r\n//       const data = await authService.login(userData);\r\n//       setUser(data);\r\n//       setIsAuthenticated(true);\r\n//       return { success: true };\r\n//     } catch (error) {\r\n//       return { success: false, message: error.response?.data?.message || 'Login failed' };\r\n//     }\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     authService.logout();\r\n//     setUser(null);\r\n//     setIsAuthenticated(false);\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider\r\n//       value={{\r\n//         user,\r\n//         isAuthenticated,\r\n//         isLoading,\r\n//         register,\r\n//         login,\r\n//         logout,\r\n//       }}\r\n//     >\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export const useAuth = () => React.useContext(AuthContext);\r\n\r\n// client/src/context/AuthContext.js\r\n// client/src/context/AuthContext.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport authService from '../api/auth';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const initializeAuth = async () => {\r\n      try {\r\n        const userData = localStorage.getItem('user');\r\n        if (userData) {\r\n          const parsedUser = JSON.parse(userData);\r\n          if (parsedUser?.token) {\r\n            const { data } = await authService.getUser();\r\n            setUser(data.user);\r\n            setIsAuthenticated(true);\r\n            \r\n            // Update localStorage with fresh data\r\n            localStorage.setItem('user', JSON.stringify({\r\n              token: parsedUser.token,\r\n              user: data.user\r\n            }));\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Auth initialization error:', error);\r\n        logout();\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      const data = await authService.register(userData);\r\n      if (data.token) {\r\n        const userObj = {\r\n          token: data.token,\r\n          user: data.user\r\n        };\r\n        localStorage.setItem('user', JSON.stringify(userObj));\r\n        setUser(data.user);\r\n        setIsAuthenticated(true);\r\n        return { success: true };\r\n      }\r\n      return { success: false, message: 'Registration failed - no token received' };\r\n    } catch (error) {\r\n      return { \r\n        success: false, \r\n        message: error.message || 'Registration failed' \r\n      };\r\n    }\r\n  };\r\n\r\n  const login = async (userData) => {\r\n    try {\r\n      const data = await authService.login(userData);\r\n      if (data.token) {\r\n        const userObj = {\r\n          token: data.token,\r\n          user: data.user\r\n        };\r\n        localStorage.setItem('user', JSON.stringify(userObj));\r\n        setUser(data.user);\r\n        setIsAuthenticated(true);\r\n        return { success: true };\r\n      }\r\n      return { success: false, message: 'Login failed - no token received' };\r\n    } catch (error) {\r\n      return { \r\n        success: false, \r\n        message: error.response?.data?.message || 'Login failed' \r\n      };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  const updateWalletBalance = (newBalance) => {\r\n    setUser(prev => {\r\n      const updatedUser = { ...prev, walletBalance: newBalance };\r\n      \r\n      // Update localStorage\r\n      const storedUser = localStorage.getItem('user');\r\n      if (storedUser) {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        localStorage.setItem('user', JSON.stringify({\r\n          ...parsedUser,\r\n          user: updatedUser\r\n        }));\r\n      }\r\n      \r\n      return updatedUser;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        isAuthenticated,\r\n        isLoading,\r\n        register,\r\n        login,\r\n        logout,\r\n        updateWalletBalance\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => React.useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}