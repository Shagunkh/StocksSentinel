{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/auth';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL\n});\n\n// Add request interceptor for auth token\napi.interceptors.request.use(config => {\n  const user = localStorage.getItem('user');\n  if (user) {\n    try {\n      const parsedUser = JSON.parse(user);\n      if (parsedUser.token) {\n        config.headers.Authorization = `Bearer ${parsedUser.token}`;\n      }\n    } catch (error) {\n      console.error('Error parsing user:', error);\n      // Clear invalid user data\n      localStorage.removeItem('user');\n    }\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Handle unauthorized\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nconst register = async userData => {\n  try {\n    const response = await api.post('/register', userData);\n    if (response.data.token) {\n      localStorage.setItem('user', JSON.stringify(response.data));\n    }\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      var _error$response$data, _error$response$data$, _error$response$data$2, _error$response$data2;\n      throw new Error(((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.errors) === null || _error$response$data$ === void 0 ? void 0 : (_error$response$data$2 = _error$response$data$[0]) === null || _error$response$data$2 === void 0 ? void 0 : _error$response$data$2.msg) || ((_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.message) || 'Registration failed');\n    } else {\n      throw new Error('Network error. Please try again.');\n    }\n  }\n};\nconst login = async userData => {\n  try {\n    const response = await api.post('/login', userData);\n    if (response.data.token) {\n      localStorage.setItem('user', JSON.stringify(response.data));\n    }\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      var _error$response$data3;\n      throw new Error(((_error$response$data3 = error.response.data) === null || _error$response$data3 === void 0 ? void 0 : _error$response$data3.message) || 'Login failed. Please check your credentials.');\n    } else {\n      throw new Error('Network error. Please try again.');\n    }\n  }\n};\nconst logout = () => {\n  localStorage.removeItem('user');\n};\nconst getUser = async () => {\n  try {\n    const response = await api.get('/user');\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n      logout();\n    }\n    throw error;\n  }\n};\nconst updateFunds = async fundsData => {\n  try {\n    const response = await api.post('/funds', fundsData);\n    if (!response.data.success) {\n      throw new Error(response.data.message || 'Transaction failed');\n    }\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      var _error$response$data4;\n      throw new Error(((_error$response$data4 = error.response.data) === null || _error$response$data4 === void 0 ? void 0 : _error$response$data4.message) || error.response.statusText);\n    } else if (error.request) {\n      throw new Error('No response from server. Please check your connection.');\n    } else {\n      throw new Error(error.message || 'Request setup failed');\n    }\n  }\n};\nconst authService = {\n  register,\n  login,\n  logout,\n  getUser,\n  updateFunds\n};\nexport default authService;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","interceptors","request","use","config","user","localStorage","getItem","parsedUser","JSON","parse","token","headers","Authorization","error","console","removeItem","Promise","reject","response","_error$response","status","window","location","href","register","userData","post","data","setItem","stringify","_error$response$data","_error$response$data$","_error$response$data$2","_error$response$data2","Error","errors","msg","message","login","_error$response$data3","logout","getUser","get","_error$response2","updateFunds","fundsData","success","_error$response$data4","statusText","authService"],"sources":["C:/Users/Shagun Khandelwal/zerodha/client/src/api/auth.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api/auth';\r\n\r\n// Create axios instance with base URL\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n});\r\n\r\n// Add request interceptor for auth token\r\napi.interceptors.request.use((config) => {\r\n  const user = localStorage.getItem('user');\r\n  \r\n  if (user) {\r\n    try {\r\n      const parsedUser = JSON.parse(user);\r\n      if (parsedUser.token) {\r\n        config.headers.Authorization = `Bearer ${parsedUser.token}`;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error parsing user:', error);\r\n      // Clear invalid user data\r\n      localStorage.removeItem('user');\r\n    }\r\n  }\r\n  \r\n  return config;\r\n}, (error) => {\r\n  return Promise.reject(error);\r\n});\r\n\r\napi.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    if (error.response?.status === 401) {\r\n      // Handle unauthorized\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n\r\nconst register = async (userData) => {\r\n  try {\r\n    const response = await api.post('/register', userData);\r\n    if (response.data.token) {\r\n      localStorage.setItem('user', JSON.stringify(response.data));\r\n    }\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response) {\r\n      throw new Error(\r\n        error.response.data?.errors?.[0]?.msg || \r\n        error.response.data?.message || \r\n        'Registration failed'\r\n      );\r\n    } else {\r\n      throw new Error('Network error. Please try again.');\r\n    }\r\n  }\r\n};\r\n\r\nconst login = async (userData) => {\r\n  try {\r\n    const response = await api.post('/login', userData);\r\n    if (response.data.token) {\r\n      localStorage.setItem('user', JSON.stringify(response.data));\r\n    }\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response) {\r\n      throw new Error(\r\n        error.response.data?.message || \r\n        'Login failed. Please check your credentials.'\r\n      );\r\n    } else {\r\n      throw new Error('Network error. Please try again.');\r\n    }\r\n  }\r\n};\r\n\r\nconst logout = () => {\r\n  localStorage.removeItem('user');\r\n};\r\n\r\nconst getUser = async () => {\r\n  try {\r\n    const response = await api.get('/user');\r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response?.status === 401) {\r\n      logout();\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst updateFunds = async (fundsData) => {\r\n  try {\r\n    const response = await api.post('/funds', fundsData);\r\n    \r\n    if (!response.data.success) {\r\n      throw new Error(response.data.message || 'Transaction failed');\r\n    }\r\n    \r\n    return response.data;\r\n  } catch (error) {\r\n    if (error.response) {\r\n      throw new Error(error.response.data?.message || error.response.statusText);\r\n    } else if (error.request) {\r\n      throw new Error('No response from server. Please check your connection.');\r\n    } else {\r\n      throw new Error(error.message || 'Request setup failed');\r\n    }\r\n  }\r\n};\r\n\r\nconst authService = {\r\n  register,\r\n  login,\r\n  logout,\r\n  getUser,\r\n  updateFunds,\r\n};\r\n\r\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}